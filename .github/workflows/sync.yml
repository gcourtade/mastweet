on:
  #push
  schedule:
    # Trigger the sync every 10 minutes.
     - cron: '*/10 * * * *'
  # Allow triggering the sync manually.
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    environment: Cron
    steps:
      - name: Check out the repo itself
        uses: actions/checkout@v3

      - name: Restore sync cache folder
        uses: actions/cache@v3
        with:
          path: cache
          # We don't really need a cache key as we never want to throw the cache
          # away. We need a unique number per run so that the cache always gets
          # saved. Then the next run will fall back to the restore-key and
          # retrieve the newest cache entry. At the end of the workflow we
          # clean up older cache entries over the Github API to free up space.
          # This is a hacky way to use the Github cache as persistent file
          # system :-)
          key: cache-${{ github.run_number }}
          restore-keys: cache-

      - name: Check if cache files are there
        run: mkdir -p cache && ls -la cache

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies

      - name: Run the script
        run: |
          pip install -r requirements.txt
          cd cache && python ../mastweet.py
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN  }}
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN  }}

      - name: Delete old Github Actions cache entries
        run: chmod +x cache-cleanup.sh && ./cache-cleanup.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

